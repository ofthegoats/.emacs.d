#+title: Org Literate Config
#+author: Piotr Kozicki
#+property: header-args :tangle yes
#+startup: overview

* Emacs Initialisation
** Settings

Defining sane settings related to global emacs and startup. If in doubt of where to put something,
consider here. Make sure that everything here will always work, or at least produce the minimum needed
to fix something else that might break later in this file.

*** Garbage Collection

Increase the garbage collection threshold

#+begin_src elisp
 (setq gc-cons-threshold (* 50 1000 1000)) 
#+end_src

Lowered at the end of the file

*** Appearance

Excluding theme, which is installed with ~use-package~ later.

Load font

#+begin_src elisp
  (add-to-list 'default-frame-alist
	       '(font . "JetbrainsMono Nerd Font-13"))
#+end_src

Line numbers

#+begin_src elisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src

Disable decorations etc.

#+begin_src elisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

*** Autopairs (electric)

Globally enable the minor ~electric-pair-mode~

#+begin_src elisp
  (electric-pair-mode 1)
#+end_src

This may not provide the best pairs for /every/ programming language. [[https://www.emacswiki.org/emacs/ElectricPair][Add a hook]] as demonstrated in the
documentation, for the specific programming language.

*** Backups

By default, emacs will leave ~file~\~ all over the place - these files are
backups in the case of a crash or similar. Even if this is useful, it's
annoying. I would like to put them all in one place.

#+begin_src elisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

*** Startup screen

#+begin_src elisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
#+end_src

*** Notifications

Turn off that loud beep

#+begin_src elisp
  (setq ring-bell-function 'ignore)
#+end_src

** Package Management

Want to use the use-package macro to make package management easy

#+begin_src elisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+end_src

* Packages
** Benchmark

See where emacs is taking the longest to load, investigate.

#+begin_src elisp
  (use-package esup
    :ensure t
    :pin melpa-stable)
#+end_src

** Display

Load gruvbox theme

#+begin_src elisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-dark-hard t))
#+end_src

*** Modeline

#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

** Indent Guide

#+begin_src elisp
  (use-package highlight-indent-guides
    :ensure t
    :hook '((prog-mode . highlight-indent-guides-mode))
    :init
    (setq highlight-indent-guides-method 'bitmap
	  highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))
#+end_src

** Which-key

#+begin_src elisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

** Undo/Redo

#+begin_src elisp
  (use-package undo-fu
    :ensure t)
#+end_src

** Evil

Vim navigation. ~evil-want-keybinding~ is set to ~nil~ for ~evil-collection~

#+begin_src elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil
	  evil-want-C-u-scroll t
	  evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-;") 'completion-at-point))
#+end_src

*** evil-collection

Improved vim navigation in most contexts

#+begin_src elisp
  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init))
#+end_src

*** evil-commentary

Comment stuff out quickly

#+begin_src elisp
  (use-package evil-commentary
    :ensure t
    :after evil
    :init
    (evil-commentary-mode))
#+end_src

*** evil-surround

#+begin_src elisp
  (use-package evil-surround
    :ensure t
    :after evil
    :init
    (global-evil-surround-mode 1))
#+end_src

** Rainbow Delimiters

Colourful delimiters make it easier to tell where they start and stop.

#+begin_src elisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Counsel/Ivy

#+begin_src elisp
  (use-package counsel
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
	   ("M-x" . counsel-M-x)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-l" . ivy-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line))
    :init
    (ivy-mode 1))
#+end_src

Improved interface for ivy

#+begin_src elisp
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode +1))
#+end_src

** Company Completion

#+begin_src elisp
  (use-package company
    :ensure t
    :init (global-company-mode +1))
#+end_src

** LaTeX

#+begin_src elisp
  (use-package tex :ensure auctex)
  (use-package cdlatex :ensure t)
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
#+end_src

** Org

TODO optimise this better for writing maths inside org-mode, and faster launches

#+begin_src elisp
  (use-package org
    :ensure t
    :pin gnu
    :init
    (setq org-pretty-entities t))
#+end_src

*** Org-Roam

Zettelkasten note-taking

#+begin_src elisp
  (use-package org-roam
    :ensure t
    :commands (org-roam-node-find)
    :init (setq org-roam-directory "~/.org/roam"))
#+end_src

*** Latex Preview

#+begin_src elisp
  (setq org-preview-latex-default-process 'dvisvgm
	org-startup-folded t
	org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

*** Code Snippets

#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (haskell . t)
     (latex . t)))
#+end_src

** TODO PDF (pdf-tools)
** Shell
*** vterm

#+begin_src elisp
  (use-package vterm
    :ensure t)
#+end_src

** Popups

Manage popups with project grouping using popper.el

#+begin_src elisp
  (use-package popper
    :ensure t
    :bind (("C-`" . popper-toggle-latest)
	   ("M-`" . popper-cycle)
	   ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
	  '("\\*Messages\\*"
	    "\\*Warnings\\*"
	    "Output\\*$"
	    "\\*Async Shell Command\\*"
	    help-mode
	    compilation-mode
	    "\\*Compile-Log\\*"
	    "\\*Async-native-compile-log\\*"
	    "^\\*vterm.*\\*$"  vterm-mode
	    "^\\*ielm\\*$"
	    magit-process-mode
	    )
	  popper-window-height 15
	  popper-group-function #'popper-group-by-project)
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** Projectile

Jump between and easily manage projects and files therein

#+begin_src elisp
  (use-package projectile
    :ensure t
    :bind-keymap ("C-c p" . 'projectile-command-map)
    :config
    (projectile-mode 1))
#+end_src

** Treemacs

#+begin_src elisp
  (use-package treemacs
    :ensure t
    :defer t)

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

** HL-TODO

#+begin_src elisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode 1))
#+end_src

** Git

View diff in gutter

#+begin_src elisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode +1))
#+end_src

Interact with git using magit

#+begin_src elisp
  (use-package magit
    :commands (magit magit-diff)
    :ensure t)
#+end_src

** LSP

Make Emacs an LSP-capable client. Hooks for languages go here too.

#+begin_src elisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((c-mode . lsp)
	   (c++-mode . lsp)
	   (python-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :config
    (setq lsp-modeline-diagnostics-scope :workspace)
    (lsp-mode)
    :commands (lsp lsp-deferred))
#+end_src

Integrate this with ~ivy~, for features like completion-at-point with ivy (~complete-symbol~)

#+begin_src elisp
  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
#+end_src

Add error-checking with ~flycheck~

#+begin_src elisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

** YASnippet

#+begin_src elisp
  (use-package yasnippet
    :ensure t
    :commands (yas-insert-snippet)
    :config (yas-global-mode))
#+end_src

#+begin_src elisp
  (use-package yasnippet-snippets
    :ensure t
    :commands (yas-insert-snippet))
#+end_src

** General Keybindings

We should be able to use general.el to use leader keys, similar as to vim or spacemacs.

#+begin_src elisp
  (use-package general
    :ensure t
    :config
    (general-create-definer otg/leader-keys
      :keymaps '(normal insert visual)
      :prefix "SPC"
      :global-prefix "C-SPC"))
#+end_src

Note that these keybindings are not comprehensive, separating them as such should keep them easy to change

*** File Operations

#+begin_src elisp
  (otg/leader-keys
       "f" '(:ignore f :which-key "files")
       "ff" '(counsel-find-file :which-key "file find")
       "fs" '(save-buffer :which-key "file save"))
#+end_src

*** Buffer Operations

#+begin_src elisp
  (otg/leader-keys
    "b" '(:ignore b :which-key "buffer")
    "TAB" '(evil-switch-to-windows-last-buffer :which-key "window switch buffer")
    "bb" '(counsel-switch-buffer :which-key "buffer switch")
    "bd" '(evil-delete-buffer :which-key "buffer delete")
    "bn" '(next-buffer :which-key "buffer next")
    "bp" '(previous-buffer :which-key "buffer prev"))
#+end_src

*** Window Operations

#+begin_src elisp
  (otg/leader-keys
    "w" '(:ignore w :which-key "windows")
    "wh" '(evil-window-left :which-key "window right")
    "wj" '(evil-window-down :which-key "window down")
    "wk" '(evil-window-up :which-key "window up")
    "wl" '(evil-window-right :which-key "window right")
    "wH" '(evil-window-move-far-left :which-key "move window left")
    "wJ" '(evil-window-move-very-bottom :which-key "move window down")
    "wK" '(evil-window-move-very-top :which-key "move window up")
    "wL" '(evil-window-move-far-right :which-key "move window right")
    "ws" '(evil-window-split :which-key "horizontal split")
    "wv" '(evil-window-vsplit :which-key "vertical split")
    "wd" '(evil-window-delete :which-key "window delete")
    "wo" '(delete-other-windows :which-key "window only"))
#+end_src

*** Git Operations

#+begin_src elisp
  (otg/leader-keys
    "g" '(:ignore g :which-key "git")
    "gg" '(magit :which-key "git status")
    "gs" '(magit :which-key "git status"))
#+end_src

*** Projectile

#+begin_src elisp
  (otg/leader-keys
    "p" '(:keymap projectile-command-map :which-key "projectile" :package projectile))
#+end_src

*** Org

#+begin_src elisp
  (otg/leader-keys
    "o" '(:ignore o :which-key "org")
    "or" '(:ignore r :which-key "roam")
    "orf" '(org-roam-node-find :which-key "find node"))
#+end_src

*** Misc

Commonly accessed keybindings with no particular group or otherwise one-offs

#+begin_src elisp
  (otg/leader-keys
    "s" '(counsel-grep-or-swiper :which-key "search")
    "t" '(vterm-other-window :which-key "toggle term")
    "SPC" '(counsel-M-x :which-key "M-x")
    "qq" '(save-buffers-kill-terminal :which-key "quit")
    "is" '(yas-insert-snippet :which-key "insert snippet"))
#+end_src

* Programming Languages

LSP hooks for languages go in [[LSP][LSP]]

Org-babel hooks go in [[Org][Org]]

** C/C++
** Python

** Haskell

Emacs does not by default recognise ~haskell-mode~

#+begin_src elisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
    :ensure t)
#+end_src

* Finish

This block is not really that important, but here we set garbage
collection to what it was before.

#+begin_src elisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
